#!/bin/bash

# Stealed from Gary Bernhardt

LOG_HASH="%C(always,yellow)%h%C(always,reset)"
LOG_ABSOLUTE_DATE="%C(always,green)(%ar)%C(always,reset)"
LOG_RELATIVE_TIME="%C(always,green)%as%C(always,reset)"
LOG_AUTHOR="%C(always,blue)<%an>%C(always,reset)"
LOG_SUBJECT="%s"
LOG_REFS="%C(always,red)%d%C(always,reset)"

LOG_FORMAT="$LOG_HASH}$LOG_RELATIVE_TIME}$LOG_ABSOLUTE_DATE}$LOG_AUTHOR}$LOG_REFS $LOG_SUBJECT"

BRANCH_PREFIX="%(HEAD)"
BRANCH_REF="%(color:red)%(color:bold)%(refname:short)%(color:reset)"
BRANCH_HASH="%(color:yellow)%(objectname:short)%(color:reset)"
BRANCH_DATE="%(color:green)(%(committerdate:relative))%(color:reset)"
BRANCH_AUTHOR="%(color:blue)%(color:bold)<%(authorname)>%(color:reset)"
BRANCH_CONTENTS="%(contents:subject)"

BRANCH_FORMAT="$BRANCH_PREFIX}$BRANCH_REF}$BRANCH_HASH}$BRANCH_DATE}$BRANCH_AUTHOR}$BRANCH_CONTENTS"

show_git_head() {
    pretty_git_log -1
    git show -p --pretty="tformat:"
}

pretty_git_log() {
    git log --graph --pretty="tformat:${LOG_FORMAT}" --no-show-signature $* | pretty_git_format | git_page_maybe
}

pretty_git_branch() {
    git branch -v --color=always --format=${BRANCH_FORMAT} $* | pretty_git_format
}

pretty_git_branch_sorted() {
    git branch -v --color=always --format=${BRANCH_FORMAT} --sort=-committerdate $* | pretty_git_format
}

checkout_git_branch() {
    local selected
    local remotes
    local is_remote=false
    local remote_name
    local branch_name

    remotes="$(git remote 2>/dev/null)"

    selected="$(
        git for-each-ref \
            --sort=-committerdate \
            --format='%(refname:short)' \
            refs/heads refs/remotes 2>/dev/null \
        | grep -v '^origin/HEAD$' \
        | awk '!seen[$0]++' \
        | fzf \
            --height=80% \
            --reverse \
            --ansi \
            --prompt='branch> ' \
            --preview='git log --graph --decorate --oneline -n 30 --color=always {1}' \
            --preview-window=right:70%:wrap
    )" || return 1

    [ -z "$selected" ] && return 0

    for r in $remotes; do
        if [[ "$selected" == "$r/"* ]]; then
            is_remote=true
            remote_name="$r"
            branch_name="${selected#"$r/"}"
            break
        fi
    done

    if $is_remote; then
        if git show-ref --verify --quiet "refs/heads/$branch_name"; then
            git switch "$branch_name"
        else
            git switch --track "$remote_name/$branch_name"
        fi
    else
        git switch "$selected"
    fi
}

pretty_git_format() {
    # Replace (2 years ago) with (2 years)
    sed -Ee 's/(^[^<]*) ago\)/\1)/' |
    # Replace (2 years, 5 months) with (2 years)
    sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' |
    # Line columns up based on } delimiter
    column -s '}' -t
}

git_page_maybe() {
    # Page only if we're asked to.
    if [ -n "$GIT_NO_PAGER" ]; then
        cat
    else
        # Page only if needed.
        less --quit-if-one-screen --no-init --RAW-CONTROL-CHARS --chop-long-lines
    fi
}
