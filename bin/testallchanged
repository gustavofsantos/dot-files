#!/usr/bin/env bash

set -euo pipefail

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Usage function
usage() {
    echo "Usage: testallchanged [MODE]"
    echo ""
    echo "Run testfile against changed test files in the repository."
    echo ""
    echo "Modes:"
    echo "  --staged    Only run tests for staged files"
    echo "  --working   Only run tests for working directory changes"
    echo "  --branch    Run tests for files changed compared to main branch"
    echo "  (default)   Run tests for both staged and working directory changes"
    echo ""
    echo "Examples:"
    echo "  testallchanged           # Default: staged + working changes"
    echo "  testallchanged --staged  # Only staged changes"
    echo "  testallchanged --working # Only working directory changes"
    echo "  testallchanged --branch  # Changes compared to main branch"
}

# Parse command line arguments
MODE="default"
if [ $# -gt 0 ]; then
    case "$1" in
        --staged)
            MODE="staged"
            ;;
        --working)
            MODE="working"
            ;;
        --branch)
            MODE="branch"
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        *)
            echo "Error: Unknown option '$1'"
            echo ""
            usage
            exit 1
            ;;
    esac
fi

# Get test files using listchangedtests
if [ "$MODE" = "default" ]; then
    echo "Getting staged and working directory changes..."
    test_files=$("$SCRIPT_DIR/listchangedtests")
else
    echo "Getting test files (mode: $MODE)..."
    test_files=$("$SCRIPT_DIR/listchangedtests" "--$MODE")
fi

if [ -z "$test_files" ]; then
    echo "No test files found."
    exit 0
fi

echo "Found test files to run:"
echo "$test_files"
echo ""

# Convert test files to array
mapfile -t test_files_array <<< "$test_files"

# Group test files by project
beyond_tests=()
web_tests=()
seubarriga_tests=()
other_tests=()

for test_file in "${test_files_array[@]}"; do
    if [ -n "$test_file" ]; then
        if [[ "$test_file" == *"/opt/loggi/py/apps/beyond/"* ]]; then
            beyond_tests+=("$test_file")
        elif [[ "$test_file" == *"/opt/loggi/web/"* ]]; then
            web_tests+=("$test_file")
        elif [[ "$PWD" == *"/Workplace/seubarriga"* ]] && [[ "$test_file" == test/* ]]; then
            seubarriga_tests+=("$test_file")
        else
            other_tests+=("$test_file")
        fi
    fi
done

exit_code=0

# Run seubarriga tests in batch
if [ ${#seubarriga_tests[@]} -gt 0 ]; then
    echo "Running ${#seubarriga_tests[@]} seubarriga tests in batch..."
    
    # Convert file paths to namespaces
    test_namespaces=()
    for test_file in "${seubarriga_tests[@]}"; do
        namespace=$(echo "$test_file" | sed 's/^test\///' | sed 's/\.clj$//' | sed 's/\//\./g' | sed 's/_/-/g')
        test_namespaces+=("$namespace")
    done
    
    # Run all tests in a single lein command
    test_command="lein with-profile test midje ${test_namespaces[*]}"
    echo "Running: $test_command"
    if eval "$test_command"; then
        echo "PASSED: All seubarriga tests"
    else
        echo "FAILED: Some seubarriga tests"
        exit_code=1
    fi
    echo ""
fi

# Run beyond tests individually
for test_file in "${beyond_tests[@]}"; do
    echo "Testing: $test_file"
    if "$SCRIPT_DIR/testfile" "$test_file"; then
        echo "PASSED: $test_file"
    else
        echo "FAILED: $test_file"
        exit_code=1
    fi
    echo ""
done

# Run web tests individually
for test_file in "${web_tests[@]}"; do
    echo "Testing: $test_file"
    if "$SCRIPT_DIR/testfile" "$test_file"; then
        echo "PASSED: $test_file"
    else
        echo "FAILED: $test_file"
        exit_code=1
    fi
    echo ""
done

# Run other tests individually
for test_file in "${other_tests[@]}"; do
    echo "Testing: $test_file"
    if "$SCRIPT_DIR/testfile" "$test_file"; then
        echo "PASSED: $test_file"
    else
        echo "FAILED: $test_file"
        exit_code=1
    fi
    echo ""
done

if [ $exit_code -eq 0 ]; then
    echo "All tests passed!"
else
    echo "Some tests failed!"
fi

exit $exit_code
